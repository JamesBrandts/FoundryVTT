{
  "name": "Hex",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/evil-eye-red-1.jpg",
  "data": {
    "description": {
      "value": "<p>You choose a creature you can see within range and mystically mark it as your quarry. Until the spell ends, you deal an extra {@dice 1d6} damage to the target whenever you hit it with a weapon attack, and you have advantage on any Wisdom (Perception) or Wisdom (Survival) check you make to find it. If the target drops to 0 hit points before this spell ends, you can use a bonus action on a subsequent turn of yours to mark a new creature.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 251",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "hour"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 90,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "9eOiLd1FGoDJ9eLu",
      "changes": [
        {
          "key": "macro.itemMacro.GM",
          "mode": 0,
          "value": "0",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.disadvantage.ability.check.wis",
          "mode": 2,
          "value": "0",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 3600
      },
      "icon": "systems/dnd5e/icons/spells/evil-eye-red-1.jpg",
      "label": "Hexed",
      "origin": "Item.SU8tsBLWTXP7NUdb",
      "tint": null,
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [
            "zeroHP"
          ],
          "transfer": false,
          "durationExpression": ""
        },
        "ActiveAuras": {
          "isAura": false,
          "radius": null,
          "aura": "None",
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        },
        "core": {
          "statusId": ""
        }
      },
      "selectedKey": [
        "macro.itemMacro.GM",
        "flags.midi-qol.disadvantage.ability.check.wis"
      ]
    }
  ],
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.spells.0xmXiPiuYws1OGcX"
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro,[preItemRoll]ItemMacro",
      "effectActivation": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Hex",
          "type": "script",
          "author": "U3VAAELfq3wUHjF9",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "if(args[0].macroPass === \"postActiveEffects\"){\n    let tokenU = await fromUuid(args[0].tokenUuid)\n    updateItemEffect()\n    let concentrationDataUuid\n    if(args[0].item.name != \"Hex\"){\n        tokenU.actor.effects.find(i=>i.data.label === \"Hex\").delete()\n        concentrationDataUuid = tokenU.actor.getFlag(\"midi-qol\",\"concentration-data\").uuid\n    }\n    else{\n        concentrationDataUuid = args[0].itemUuid\n    }\n    const effectData2 = {\n        changes: [\n          {key: \"flags.midi-qol.hex\", mode: 5, value: args[0].targetUuids[0], priority: 20},\n          {key: \"flags.dnd5e.DamageBonusMacro\", mode: 0, value: `ItemMacro.${args[0].item.name}`, priority: 20}\n        ],  \n        origin: concentrationDataUuid,\n        disabled: false,\n        duration: args[0].item.effects[0].duration,\n        icon: args[0].item.img,\n        label: 'Hex'\n    }\n    MidiQOL.socket().executeAsGM(\"createEffects\", {actorUuid: tokenU.actor.uuid, effects: [effectData2]})\n    if(args[0].item.name != \"Hex\")return;\n    let hexPassData = args[0].item\n    hexPassData.name = \"Hex Transffer\";\n    hexPassData.data.level = 0;\n    hexPassData.data.preparation.mode = \"innate\"\n    hexPassData.data.components.concentration = false\n    let items = (await tokenU.actor.createEmbeddedDocuments(\"Item\",[hexPassData])).map(i=>i.uuid)\n    let removeUuids = getProperty(tokenU.actor.data.flags, \"midi-qol.concentration-data.removeUuids\") ?? [];\n    removeUuids = removeUuids.concat(items);\n    if (removeUuids.length > 0) tokenU.actor.setFlag(\"midi-qol\", \"concentration-data.removeUuids\", removeUuids);\n    /*\n    let hookId = Hooks.on(\"deleteActiveEffect\",(workflow)=>{\n        if(workflow.data.label != \"Concentrating\")return;\n        if(workflow.data.origin != args[0].itemUuid)return;\n        tokenU.actor.deleteEmbeddedDocuments(\"Item\",[hexPassItem[0].id])\n        Hooks.off(\"deleteActiveEffect\",hookId)\n    })\n    */\n}\nif(args[0].macroPass === \"DamageBonus\"){\n    if(args[0].hitTargetUuids.length < 1)return;\n    const tokenU =  await fromUuid(args[0].tokenUuid);\n    if(tokenU.actor.data.flags[\"midi-qol\"].hex != args[0].hitTargetUuids[0])return;\n    const diceMult = args[0].isCritical ? 2: 1;\n    return {damageRoll: `${diceMult}d6`, flavor: \"Hex Damage\"}\n}\nif(args[0].macroPass === \"preItemRoll\"){\n    if(args[0].item.name === \"Hex\")return;\n    const tokenU =  await fromUuid(args[0].tokenUuid);\n    const lastTarget = await fromUuid(tokenU.actor.data.flags[\"midi-qol\"].hex)\n    if(lastTarget.actor.data.data.attributes.hp.value > 0){\n        ui.notifications.warn(\"Your last Hex target has more than 0 HP currently\")\n        return false\n    }\n}\nif(args[0] === \"on\"){\n    const lastArg = args[args.length-1]\n    const origin = await fromUuid(lastArg.origin)\n    const tokenU = await fromUuid(lastArg.tokenUuid)\n    if(origin.name === \"Hex\")return;\n    let hookId2 = Hooks.on(\"deleteActiveEffect\",async(hookArgs)=>{\n        if(hookArgs.data.label != \"Concentrating\")return;\n        const orignHook = await fromUuid(hookArgs.data.origin)\n        if(origin.actor != orignHook.actor)return;\n        Hooks.off(\"deleteActiveEffect\",hookId2)\n        tokenU.actor.deleteEmbeddedDocuments(\"ActiveEffect\",[lastArg.effectId])\n        \n    })\n}\nasync function updateItemEffect(){\n    const abilities = [\n        {name:\"Strength\",id:\"str\"},\n        {name:\"Dexterity\",id:\"dex\"},\n        {name:\"Constitution\",id:\"con\"},\n        {name:\"Intelligence\",id:\"int\"},\n        {name:\"Wisdom\",id:\"wis\"},\n        {name:\"Charisma\",id:\"cha\"}\n    ]\n    let abilitiesContent = \"\"\n    for (let ability of abilities) {\n        abilitiesContent += `<option value=${ability.id}>${ability.name}</option>`;\n    }\n    await Dialog.prompt({\n        title: 'Hex',\n        content: `\n            <div class=\"form-group\">\n            <label for=\"exampleSelect\">Selecione o Elemento</label>\n            <select name=\"exampleSelect\">\n                ${abilitiesContent}\n            </select>\n            </div>\n        `,\n            callback: async(html) => {\n            let select = html.find('[name=\"exampleSelect\"]').val();\n            let abilityId = select;\n            let targetToken = await fromUuid(args[0].targetUuids[0])\n            let hexEffect = targetToken.actor.effects.find(i=>i.data.label === \"Hexed\")\n            let changes = [\n            {\n                \"key\": \"macro.itemMacro.GM\",\n                \"value\": \"0\",\n                \"mode\": 0,\n                \"priority\": \"20\"\n            },\n            {\n                \"key\": `flags.midi-qol.disadvantage.ability.check.${abilityId}`,\n                \"value\": \"0\",\n                \"mode\": 2,\n                \"priority\": \"20\"\n            }\n            ]\n            await MidiQOL.socket().executeAsGM(\"updateEffects\", {actorUuid: targetToken.actor.uuid, updates: [{_id:hexEffect.id,changes}]})                   \n        }        \n        }\n    )\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "cf": {
      "id": "temp_ovon30cu8t",
      "color": "#000000"
    },
    "midiProperties": {
      "nodam": false,
      "halfdam": false,
      "fulldam": false,
      "critOther": false,
      "concentration": false,
      "rollOther": false,
      "magicdam": false,
      "magiceffect": false,
      "toggleEffect": false,
      "selfEffect": false
    },
    "exportSource": {
      "world": "only-midi-qol-and-dae",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.3"
    }
  }
}