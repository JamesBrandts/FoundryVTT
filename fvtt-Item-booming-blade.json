{
  "name": "Booming Blade",
  "type": "spell",
  "img": "icons/magic/sonic/projectile-shock-wave-blue.webp",
  "data": {
    "description": {
      "value": "<p>This is not SRD material, please consult the source books.</p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p>The easiest way I found to implement this was to set the cantrip to do the weapon damage, so for this to work properly, unfortunately, you’ll have to configure the Ability Modifier, Damage Formula and Damage Type to match the weapon that’ll be used to make the attack. If you have multiple weapons on which to use this cantrip, you can copy it and use each weapon on the name (E.g.: Booming Blade (Short Sword),Booming Blade (War Hammer) and configure each accordingly.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": false,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "always",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "9MUNrfcmZSsacNw6",
      "changes": [
        {
          "key": "flags.dnd5e.DamageBonusMacro",
          "mode": 0,
          "value": "ItemMacro.Booming Blade",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "turns": 1
      },
      "icon": "icons/magic/sonic/projectile-shock-wave-blue.webp",
      "label": "Booming Blade",
      "transfer": false,
      "flags": {
        "core": {
          "statusId": ""
        },
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [
            "1Attack"
          ],
          "transfer": false,
          "durationExpression": ""
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "flags.dnd5e.DamageBonusMacro",
        "macro.itemMacro"
      ]
    }
  ],
  "flags": {
    "midi-qol": {
      "criticalThreshold": "20",
      "effectActivation": false,
      "onUseMacroName": ""
    },
    "core": {
      "sourceId": "Item.XTRjeSJzMXwRDnRC"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Booming Blade",
          "type": "script",
          "author": "wLtW0cjONx7B4hSn",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const lastArg = args[args.length - 1];\nif(args[0]==\"on\"){\n    const tactor = await MidiQOL.MQfromActorUuid(lastArg.actorUuid);\n    let weapons = tactor.items.filter(i => i.data.type === `weapon` && i.data.data.actionType == \"mwak\" && i.data.data.equipped);\n    let weapon_content = ``;\n    for (let weapon of weapons) {\n        weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\n    }\n    let content = `\n    <div class=\"form-group\">\n    <label>Weapons : </label>\n    <select name=\"weapons\">\n        ${weapon_content}\n    </select>\n    </div>`;\n    if (weapons.length > 1){\n        new Dialog({\n            title: \"Choose Weapon\",\n            content,\n            buttons:\n            {\n                Ok:\n                {\n                    label: `Ok`,\n                    callback: (html) => {\n                        let itemId = html.find('[name=weapons]')[0].value;\n                        let weaponItem = tactor.items.get(itemId);\n                        weaponItem.roll()\n                    }\n                },\n                Cancel:\n                {\n                    label: `Cancel`\n                }\n            }\n        }).render(true);\n    }\n    else{\n        let weaponItem = weapons[0];\n        weaponItem.roll()\n    }\n}\nif(args[0].tag != \"DamageBonus\"){return};\nfor (let tokenUuid of args[0]?.hitTargetUuids) {\n    const target = await fromUuid(tokenUuid);\n    const targetActor = target.actor;\n    let effectData = {\n        \"changes\": [\n            {\n                \"key\": \"macro.itemMacro\",\n                \"mode\": 0,\n                \"value\": `${args[0].itemCardId} ${args[0].actor._id}`,\n                \"priority\": \"20\"\n            }\n        ],\n        \"disabled\": false,\n        \"duration\": {\n            \"rounds\": 1\n        },\n        \"icon\": \"icons/magic/sonic/projectile-shock-wave-blue.webp\",\n        \"label\": \"Booming Blade\",\n        \"flags\": {\n            \"dae\": {\n                \"stackable\": \"none\",\n                \"durationExpression\": \"\",\n                \"macroRepeat\": \"startEveryTurn\",\n                \"specialDuration\": [],\n                \"transfer\": false,\n                \"itemData\": {\n                    \"flags\": {\n                        \"itemacro\": {\n                            \"macro\": {\n                                \"data\": {\n                                    \"command\": 'const lastArg = args[args.length-1]\\nlet target = await canvas.tokens.get(lastArg.tokenId)\\nif(args[0] == \\\"on\\\"){\\n    let hookID = Hooks.on(\\'updateCombat\\', async function (workflow) {\\n        \\n        if(await canvas.tokens.get(workflow.current.tokenId).actor.id === args[2]){\\n            target.actor.deleteEmbeddedDocuments(\\'ActiveEffect\\',[lastArg.effectId])\\n            Hooks.off(\\\"updateCombat\\\", hookID);\\n        }\\n    })\\n    if(game.combat?.current.tokenId == lastArg.tokenId){\\n        let boomingBladeEffect = await target.actor.data.effects.get(lastArg.effectId)\\n        await boomingBladeEffect.setFlag(\\'dae\\',\\'specialDuration\\',[\\\"isMoved\\\"])\\n    }\\n\\n\\n}\\n\\nif(args[0] == \\\"each\\\"){\\n    let boomingBladeEffect = await target.actor.data.effects.get(lastArg.effectId)\\n    await boomingBladeEffect.setFlag(\\'dae\\',\\'specialDuration\\',[\\\"isMoved\\\"])\\n}\\nif(args[0] == \\\"off\\\"){    \\n    let boomingBladeCardId = args[1]\\n    let boomingBladeCasterId = args[2]\\n    let level = await game.actors.get(boomingBladeCasterId).data.data.attributes.hd\\n    let tokenD = await canvas.tokens.get(lastArg.tokenId)\\n    await new Promise(r => setTimeout(r, 200));\\nif(game.combat?.current.tokenId == lastArg.tokenId){\\n      let dices = 1 + (Math.floor((level + 1) / 6))\\n      Math.floor((4+1)/6)+1\\n      let damageRoll = await new Roll(`${dices}d8`).roll();\\n      new MidiQOL.DamageOnlyWorkflow(target.actor, target, damageRoll.total, \\\"thunder\\\", [target], damageRoll, { flavor: \\\"Booming Blade Secondary Damage\\\", itemCardId: boomingBladeCardId});  \\n  }\\n}',\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  if(targetActor.effects.filter(i=>i.data.label == \"Booming Blade\").length < 1){\n    await MidiQOL.socket().executeAsGM(\"createEffects\", {actorUuid: targetActor.uuid, effects: [effectData]})\n  }\n}\nconst tactor = await MidiQOL.MQfromActorUuid(lastArg.actorUuid);\nconst diceMult = args[0].isCritical ? 2: 1;\nconst baseDice = Math.floor((tactor.data.data.details.level+1)/6);\nif(baseDice < 1){return}\nreturn {damageRoll: `${baseDice * diceMult}d8[thunder]`, flavor: \"Booming Blade\"};",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "teste",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}